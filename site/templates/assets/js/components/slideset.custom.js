!function(t){var i;window.UIkit2&&(i=t(UIkit2)),"function"==typeof define&&define.amd&&define("uikit-slideset",["uikit"],function(){return i||t(UIkit2)})}(function(d){"use strict";var r;function n(t,i,e,s){var n,a,o,r,l=d.$.Deferred(),h=!1===this.options.delay?Math.floor(this.options.duration/2):this.options.delay,u=this;if(s=s||1,this.element.css("min-height",this.element.height()),e[0]===i[0])return l.resolve(),l.promise();if("object"==typeof t?(n=t[0],a=t[1]||t[0]):a=n=t,d.$body.css("overflow-x","hidden"),o=function(){if(i&&i.length&&i.hide().removeClass(a+" uk-animation-reverse").css({opacity:"","animation-delay":"",animation:""}),e.length){for(r=0;r<e.length;r++)e.eq(1==s?r:e.length-r-1).css("animation-delay",r*h+"ms");var t=function(){e.removeClass(""+n).css({opacity:"",display:"","animation-delay":"",animation:""}),l.resolve(),d.$body.css("overflow-x",""),u.element.css("min-height",""),t=!1};e.addClass(n)[1==s?"last":"first"]().one(d.support.animation.end,function(){t&&t()}).end().css("display",""),setTimeout(function(){t&&t()},e.length*h*2)}else l.resolve()},e.length&&e.css("animation-duration",this.options.duration+"ms"),i&&i.length)for(i.css("animation-duration",this.options.duration+"ms")[1==s?"last":"first"]().one(d.support.animation.end,function(){o()}),r=0;r<i.length;r++)!function(t,i){setTimeout(function(){i.css("display","none").css("display","").css("opacity",0).on(d.support.animation.end,function(){i.removeClass(a)}).addClass(a+" uk-animation-reverse")}.bind(this),r*h)}(0,i.eq(1==s?r:i.length-r-1));else o();return l.promise()}d.component("slideset",{defaults:{default:1,animation:"fade",duration:200,filter:"",delay:!1,controls:!1,autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},sets:[],boot:function(){d.ready(function(t){d.$("[data-uk-slideset]",t).each(function(){var t=d.$(this);t.data("slideset")||d.slideset(t,d.Utils.options(t.attr("data-uk-slideset")))})})},init:function(){var e=this;this.activeSet=!1,this.list=this.element.find(".uk-slideset"),this.nav=this.element.find(".uk-slideset-nav"),this.controls=this.options.controls?d.$(this.options.controls):this.element,d.$win.on("resize load",d.Utils.debounce(function(){e.update()},100)),e.list.addClass("uk-grid-width-1-"+e.options.default),["xlarge","large","medium","small"].forEach(function(t){e.options[t]&&e.list.addClass("uk-grid-width-"+t+"-1-"+e.options[t])}),this.on("click.uk.slideset","[data-uk-slideset-item]",function(t){if(t.preventDefault(),!e.animating){var i=d.$(this).attr("data-uk-slideset-item");if(e.activeSet!==i)switch(i){case"next":case"previous":e["next"==i?"next":"previous"]();break;default:e.show(parseInt(i,10))}}}),this.controls.on("click.uk.slideset","[data-uk-filter]",function(t){var i=d.$(this);i.parent().hasClass("uk-slideset")||(t.preventDefault(),e.animating||e.currentFilter==i.attr("data-uk-filter")||(e.updateFilter(i.attr("data-uk-filter")),e._hide().then(function(){e.update(!0,!0)})))}),this.on("swipeRight swipeLeft",function(t){e["swipeLeft"==t.type?"next":"previous"]()}),this.updateFilter(this.options.filter),this.update(),this.element.on({mouseenter:function(){e.options.pauseOnHover&&(e.hovering=!0)},mouseleave:function(){e.hovering=!1}}),this.options.autoplay&&this.start(),d.domObserve(this.list,function(t){e.list.children(":visible:not(.uk-active)").length&&e.update(!1,!0)})},update:function(t,i){var e,s=this.visible;if(this.visible=this.getVisibleOnCurrenBreakpoint(),s!=this.visible||i){for(this.children=this.list.children().hide(),this.items=this.getItems(),this.sets=function(t,i){var e,s=0,n=-1,a=t.length||0,o=[];if(i<1)return null;for(;s<a;)(e=s%i)?o[n][e]=t[s]:o[++n]=[t[s]],s++;s=0,a=o.length;for(;s<a;)o[s]=jQuery(o[s]),s++;return o}(this.items,this.visible),e=0;e<this.sets.length;e++)this.sets[e].css({display:"none"});if(this.nav.length&&this.nav.empty()){for(e=0;e<this.sets.length;e++)this.nav.append('<li data-uk-slideset-item="'+e+'"><a></a></li>');this.nav[1==this.nav.children().length?"addClass":"removeClass"]("uk-invisible")}this.activeSet=!1,this.show(0,!t)}},updateFilter:function(t){var i,e=this;this.currentFilter=t,this.controls.find("[data-uk-filter]").each(function(){(i=d.$(this)).parent().hasClass("uk-slideset")||(i.attr("data-uk-filter")==e.currentFilter?i.addClass("uk-active"):i.removeClass("uk-active"))})},getVisibleOnCurrenBreakpoint:function(){var i=null,e=d.$('<div style="position:absolute;height:1px;top:-1000px;width:100px"><div></div></div>').appendTo("body"),s=e.children().eq(0),n=this.options;return["xlarge","large","medium","small"].forEach(function(t){n[t]&&!i&&(e.attr("class","uk-grid-width-"+t+"-1-2").width(),50==s.width()&&(i=t))}),e.remove(),this.options[i]||this.options.default},getItems:function(){var n,a=[];return this.currentFilter?("string"==typeof(n=this.currentFilter||[])&&(n=n.split(/,/).map(function(t){return t.trim()})),this.children.each(function(t){var i=d.$(this),e=i.attr("data-uk-filter"),s=!n.length;e&&(e=e.split(/,/).map(function(t){return t.trim()}),n.forEach(function(t){-1<e.indexOf(t)&&(s=!0)})),s&&a.push(i[0])}),a=d.$(a)):a=this.list.children(),a},show:function(t,i,e){var s=this;if(this.activeSet!==t&&!this.animating){e=e||(t<this.activeSet?-1:1);var n=this.sets[this.activeSet]||[],a=this.sets[t],o=this._getAnimation();!i&&d.support.animation||(o=r.none),this.animating=!0,this.nav.length&&this.nav.children().removeClass("uk-active").eq(t).addClass("uk-active"),o.apply(s,[n,a,e]).then(function(){d.Utils.checkDisplay(a,!0),s.children.hide().removeClass("uk-active"),a.addClass("uk-active").css({display:"",opacity:""}),s.animating=!1,s.activeSet=t,d.Utils.checkDisplay(a,!0),s.trigger("show.uk.slideset",[a])})}},_getAnimation:function(){var t=r[this.options.animation]||r.none;return d.support.animation||(t=r.none),t},_hide:function(){var t=this,i=this.sets[this.activeSet]||[],e=this._getAnimation();return this.animating=!0,e.apply(t,[i,[],1]).then(function(){t.animating=!1})},next:function(){this.show(this.sets[this.activeSet+1]?this.activeSet+1:0,!1,1)},previous:function(){this.show(this.sets[this.activeSet-1]?this.activeSet-1:this.sets.length-1,!1,-1)},start:function(){this.stop();var t=this;this.interval=setInterval(function(){t.hovering||t.animating||t.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)}}),r={none:function(){var t=d.$.Deferred();return t.resolve(),t.promise()},fade:function(t,i){return n.apply(this,["uk-animation-fade",t,i])},"slide-bottom":function(t,i){return n.apply(this,["uk-animation-slide-bottom",t,i])},"slide-top":function(t,i){return n.apply(this,["uk-animation-slide-top",t,i])},"slide-vertical":function(t,i,e){var s=["uk-animation-slide-top","uk-animation-slide-bottom"];return-1==e&&s.reverse(),n.apply(this,[s,t,i])},"slide-horizontal":function(t,i,e){var s=["uk-animation-slide-right","uk-animation-slide-left"];return-1==e&&s.reverse(),n.apply(this,[s,t,i,e])},scale:function(t,i){return n.apply(this,["uk-animation-scale-up",t,i])}},d.slideset.animations=r});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
